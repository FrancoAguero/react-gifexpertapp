{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","imputValue","setImputValue","onSubmit","e","preventDefault","trim","length","categories","type","className","placeholder","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","id","title","images","downsized_medium","GifGridItem","src","alt","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","img","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"mMAIaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAE1B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAcA,OACI,sBAAMC,SATW,SAACC,GAClBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAe,SAAAS,GAAU,OAAKP,GAAL,mBAAoBO,OAC7CN,EAAc,MAKlB,SACI,uBACIO,KAAK,OACLC,UAAU,cACVC,YAAa,eACbC,MAAQX,EACRY,SAnBS,SAACT,GAClBF,EAAcE,EAAEU,OAAOF,a,+BCTlBG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DAEbC,EAFa,iDAEmCC,UAAUH,GAF7C,+DAGAI,MAAMF,GAHN,cAGbG,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAI,YAClB,MAAO,CACHC,GAFuC,EAAvBA,GAGhBC,MAHuC,EAAnBA,MAIpBT,IAJuC,EAAZU,OAIfC,iBAAiBX,QAVlB,kBAcZM,GAdY,4CAAH,sDCEPM,EAAc,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOT,EAAU,EAAVA,IACjC,OACI,sBAAKR,UAAU,yCAAf,UACI,4BAAKiB,IACL,qBAAKI,IAAMb,EAAMc,IAAML,QCFtBM,EAAU,SAAC,GAAgB,IAAfjB,EAAc,EAAdA,SAErB,ECHwB,SAACA,GACzB,MAA0BhB,mBAAS,CAC/BuB,KAAM,GACNW,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAaA,OARAC,qBAAU,WACNtB,EAAQC,GACHsB,MAAK,SAACd,GAAD,OAAUY,EAAS,CACrBb,KAAMC,EACNU,SAAS,SAElB,CAAClB,IAEGmB,EDXsBI,CAAavB,GAA9BQ,EAAZ,EAAOD,KAAWW,EAAlB,EAAkBA,QAElB,OACI,qCACI,oBAAIxB,UAAU,oCAAd,SAAoDM,IACnDkB,GAAW,mBAAGxB,UAAU,mCAAb,yBACZ,qBAAKA,UAAU,YAAf,SAEQc,EAAKC,KAAI,SAACe,GAAD,OACL,cAAC,EAAD,eAEQA,GADCA,EAAId,aEZxBe,EAAe,WAExB,MAAoCzC,mBAAS,CAAC,cAA9C,mBAAOQ,EAAP,KAAmBT,EAAnB,KAEA,OACI,qCAEI,8CAEA,cAAC,EAAD,CAAaA,cAAgBA,IAE7B,uBAEA,6BACMS,EAAWiB,KAAI,SAAET,GAAF,OACb,cAAC,EAAD,CAEIA,SAAUA,GADLA,Y,MCb7B0B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.648941da.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n\r\n    const [imputValue, setImputValue] = useState('')\r\n\r\n    const handleChange = (e) => {\r\n        setImputValue(e.target.value)\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if( imputValue.trim().length > 2){\r\n            setCategories( categories => [imputValue, ...categories])\r\n            setImputValue('')\r\n        } \r\n    }\r\n\r\n    return (\r\n        <form onSubmit={ handleSubmit }>\r\n            <input \r\n                type=\"text\" \r\n                className='addCategory'\r\n                placeholder={\"Buscar GIF's\"}\r\n                value={ imputValue }\r\n                onChange={ handleChange }\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n\r\n\r\n","export const getGifs = async(category) => {\r\n        \r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=7zDMjfPzAA9OYGdgrVNaQplPWyYZPUCh`;\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n    \r\n    const gifs = data.map(({id, title, images}) => {\r\n        return {\r\n            id: id,\r\n            title: title,\r\n            url: images.downsized_medium.url\r\n        }\r\n    })\r\n    \r\n    return gifs\r\n};\r\n","import React from 'react'\r\n\r\nexport const GifGridItem = ({ title, url }) => {\r\n    return (\r\n        <div className='card animate__animated animate__fadeIn'>\r\n            <p>{ title }</p>\r\n            <img src={ url } alt={ title } />\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({category}) => {\r\n    \r\n    const {data:gifs, loading} = useFetchGifs(category)\r\n    \r\n    return (\r\n        <>\r\n            <h3 className='animate__animated animate__fadeIn'>{ category }</h3>\r\n            {loading && <p className='animate__animated animate__flash'>Cargando...</p>}\r\n            <div className='card-grid'>\r\n                {\r\n                    gifs.map((img) => (\r\n                        <GifGridItem \r\n                            key={img.id} \r\n                            {...img}\r\n                        />\r\n                    ))\r\n                }\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n","import { useEffect, useState } from \"react\"\r\nimport { getGifs } from '../helpers/getGifs'\r\n\r\nexport const useFetchGifs = (category) => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    })\r\n\r\n    useEffect(() => {\r\n        getGifs(category)\r\n            .then((gifs) => setState({\r\n                data: gifs,\r\n                loading: false\r\n            }))\r\n    }, [category])\r\n    \r\n    return state\r\n}\r\n","import React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState(['One punch'])\r\n\r\n    return (\r\n        <>\r\n\r\n            <h2>GifExpertApp</h2>   \r\n\r\n            <AddCategory setCategories={ setCategories }/>\r\n\r\n            <hr />\r\n\r\n            <ol>\r\n                { categories.map(( category ) => \r\n                    <GifGrid \r\n                        key={category}\r\n                        category={category}\r\n                    />\r\n                )}\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { GifExpertApp } from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}